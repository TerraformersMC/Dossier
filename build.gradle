plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
    id 'fabric-loom' version '0.10-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archive_name
version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/dossier.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
    inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

java {
	withSourcesJar()
}

jar {
    from "LICENSE"
}

publish {
    onlyIf {
        checkVersion(version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    setupRepositories(repositories)
}

void setupRepositories(RepositoryHandler repositories) {
    //repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USERNAME
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}

ext.checkVersion = { version ->
	try {
		def xml = new URL("https://maven.terraformersmc.com/com/terraformersmc/dossier/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			println "Dossier version $version will not be published; already exists"
			return false
		} else {
			println "Dossier version $version will be published"
			return true
		}
	} catch (FileNotFoundException ignored) {
		println "Dossier is not on maven yet"
		return true
	}
}
